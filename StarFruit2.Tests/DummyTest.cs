using System;
using System.Collections.Generic;
using System.Text;
using Xunit;
using FluentAssertions;
using StarFruit2.Common.Descriptors;
using StarFruit2.Common;
using System.CommandLine.Parsing;

namespace StarFruit2.Tests
{
    using StarFruit2.Tests.TestSampleDatatestName;
    public class MyClass { }
    public class MyClassCommandSourceResult : CommandSourceResult
    {
        public MyClassCommandSourceResult(ParseResult parseResult, MyClassCommandSource myClassCommandSource) : base(parseResult)
        {
        }
    }
    public class DummyTest
    {
        private CliDescriptor GetCliDescriptor()
        {
            var commandDescriptor = new CommandDescriptor(null, "MyClass", null)
            {
                Name = "my-class",
                Parent = null,

            };
            commandDescriptor.Root = commandDescriptor;
            var testName = "testName";
            var GeneratedNamespace = "StarFruit2.Tests.TestSampleData" + testName;
            var GeneratedSourceClassName = testName + "CommandSource";
            string originalName = "SomeOption";
            string commandLineName = "some-option";
            string description = "desc";
            var defaultValue = new DefaultValueDescriptor("abc");

            var option = new OptionDescriptor(commandDescriptor, originalName, null)
            {
                Name = originalName,
                CliName = commandLineName,
                Description = description,
            };
            option.Arguments.Add(new ArgumentDescriptor(new ArgTypeInfoRoslyn(typeof(string)), null, originalName, null)
            {
                Name = originalName,
                CliName = commandLineName,
                Description = description,
                DefaultValue = defaultValue,
            });

            commandDescriptor.AddOptions(options:
                new List<OptionDescriptor>()
                {
                     option
                }
            );

            return new CliDescriptor
            {
                GeneratedComandSourceNamespace = GeneratedNamespace,
                GeneratedCommandSourceClassName = GeneratedSourceClassName,
                CommandDescriptor = commandDescriptor,
            };
        }
        [Fact]
        public void TestGenerateOutput()
        {
            var cliDescriptor = GetCliDescriptor();
            var generate = new Generate();
            var codeGen = new CodeGeneratorTemp(generate);

            var output = codeGen.GenerateSourceCode(cliDescriptor);

            // THIS LINE WILL BREAK NOT ON MY MACHINE
            using (System.IO.StreamWriter file =
            new System.IO.StreamWriter(@"C:\Users\jeanj\source\repos\StarFruit2\StarFruit2.Tests\TestData\Temp.cs"))
            {
                file.WriteLine("// THIS IS A TEMP FILE GENERATED BY StarFruit2.Tests/DummyTest.cs");
                foreach (string line in output)
                {
                    file.WriteLine(line);
                }
            }
        }
    }
}
